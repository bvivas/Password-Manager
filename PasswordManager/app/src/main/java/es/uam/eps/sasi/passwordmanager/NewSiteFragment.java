package es.uam.eps.sasi.passwordmanager;

import android.os.Bundle;
import android.text.Editable;
import android.text.TextWatcher;
import android.view.LayoutInflater;
import android.view.View;
import android.view.ViewGroup;
import android.widget.Button;
import android.widget.CheckBox;
import android.widget.CompoundButton;
import android.widget.RadioButton;

import androidx.annotation.NonNull;
import androidx.databinding.DataBindingUtil;
import androidx.fragment.app.Fragment;
import androidx.navigation.Navigation;

import es.uam.eps.sasi.passwordmanager.database.PasswordManagerDAO;
import es.uam.eps.sasi.passwordmanager.database.PasswordManagerDatabase;
import es.uam.eps.sasi.passwordmanager.databinding.FragmentNewSiteBinding;

public class NewSiteFragment extends Fragment {

    private FragmentNewSiteBinding binding;

    private String username;

    private String site;
    private String siteUsername;
    private String password;

    PasswordManagerDatabase database = PasswordManagerDatabase.getInstance(App.getContext());
    PasswordManagerDAO passwordManagerDAO = database.getPasswordManagerDAO();

    @Override
    public View onCreateView(
            @NonNull LayoutInflater inflater,
            ViewGroup container,
            Bundle savedInstanceState
    ) {
        binding = DataBindingUtil.inflate(
                inflater,
                R.layout.fragment_new_site,
                container,
                false
        );

        // Retrieve the username from arguments
        username = HomeFragmentArgs.fromBundle(getArguments()).getUsername();

        return binding.getRoot();
    }

    @Override
    public void onStart() {
        super.onStart();

        // Clear inputs
        binding.siteTextInput.setText(null);
        binding.siteUserTextInput.setText(null);
        binding.sitePasswordTextInput.setText(null);

        // Update the site text field
        TextWatcher siteTextWatcher = new TextWatcher() {

            @Override
            public void beforeTextChanged(CharSequence charSequence, int i, int i1, int i2) {

            }

            @Override
            public void onTextChanged(CharSequence charSequence, int i, int i1, int i2) {
                site = charSequence.toString();
            }

            @Override
            public void afterTextChanged(Editable editable) {

            }
        };
        binding.siteTextInput.addTextChangedListener(siteTextWatcher);

        // Update the site username text field
        TextWatcher siteUserTextWatcher = new TextWatcher() {

            @Override
            public void beforeTextChanged(CharSequence charSequence, int i, int i1, int i2) {

            }

            @Override
            public void onTextChanged(CharSequence charSequence, int i, int i1, int i2) {
                siteUsername = charSequence.toString();
            }

            @Override
            public void afterTextChanged(Editable editable) {

            }
        };
        binding.siteUserTextInput.addTextChangedListener(siteUserTextWatcher);

        // Update the site username text field
        TextWatcher passwordTextWatcher = new TextWatcher() {

            @Override
            public void beforeTextChanged(CharSequence charSequence, int i, int i1, int i2) {

            }

            @Override
            public void onTextChanged(CharSequence charSequence, int i, int i1, int i2) {
                password = charSequence.toString();
            }

            @Override
            public void afterTextChanged(Editable editable) {

            }
        };
        binding.sitePasswordTextInput.addTextChangedListener(passwordTextWatcher);

        // Autogenerated password
        CheckBox autogenerateCheckbox = binding.autogenerateCheckbox;
        autogenerateCheckbox.setOnCheckedChangeListener(new CompoundButton.OnCheckedChangeListener() {
            @Override
            public void onCheckedChanged(CompoundButton buttonView, boolean isChecked) {
                if (buttonView.isChecked()) {
                    binding.sitePasswordTextInput.setText(null);
                    binding.sitePasswordTextInput.setText(generatePassword());
                }
                else
                {
                    binding.sitePasswordTextInput.setText(null);
                }
            }
        });

        

        // Navigation
        Button homeButton = binding.homeButton;
        Button newSiteButton = binding.newSiteButton;
        Button settingsButton = binding.settingsButton;

        homeButton.setOnClickListener(view -> {
            Navigation.findNavController(view)
                    .navigate(NewSiteFragmentDirections
                            .actionNewSiteFragmentToHomeFragment(username));
        });

        newSiteButton.setOnClickListener(view -> {
            Navigation.findNavController(view)
                    .navigate(NewSiteFragmentDirections
                            .actionNewSiteFragmentSelf(username));
        });

        settingsButton.setOnClickListener(view -> {
            Navigation.findNavController(view)
                    .navigate(NewSiteFragmentDirections
                            .actionNewSiteFragmentToSettingsFragment(username));
        });
    }

    public String generatePassword() {

        String alphabet = "abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789-_$";
        int size = 20;
        StringBuilder sb = new StringBuilder(size);
        int i = 0;

        for(i=0; i < size; i++) {
            int index = (int)(alphabet.length() * Math.random());
            sb.append(alphabet.charAt(index));
        }

        return sb.toString();
    }
}
