package es.uam.eps.sasi.passwordmanager;

import android.os.Bundle;
import android.text.Editable;
import android.text.InputType;
import android.text.TextWatcher;
import android.view.LayoutInflater;
import android.view.View;
import android.view.ViewGroup;
import android.widget.CheckBox;
import android.widget.CompoundButton;
import android.widget.ImageButton;

import androidx.annotation.NonNull;
import androidx.databinding.DataBindingUtil;
import androidx.fragment.app.Fragment;
import androidx.navigation.Navigation;

import com.google.android.material.snackbar.Snackbar;

import java.security.MessageDigest;
import java.security.NoSuchAlgorithmException;
import java.util.List;
import java.util.concurrent.atomic.AtomicBoolean;

import es.uam.eps.sasi.passwordmanager.database.PasswordManagerDAO;
import es.uam.eps.sasi.passwordmanager.database.PasswordManagerDatabase;
import es.uam.eps.sasi.passwordmanager.databinding.FragmentNewSiteBinding;

public class NewSiteFragment extends Fragment {

    private FragmentNewSiteBinding binding;

    private String username;

    private String siteName;
    private String siteUsername;
    private String password;
    private boolean autogenerated;

    PasswordManagerDatabase database = PasswordManagerDatabase.getInstance(App.getContext());
    PasswordManagerDAO passwordManagerDAO = database.getPasswordManagerDAO();

    @Override
    public View onCreateView(
            @NonNull LayoutInflater inflater,
            ViewGroup container,
            Bundle savedInstanceState
    ) {
        binding = DataBindingUtil.inflate(
                inflater,
                R.layout.fragment_new_site,
                container,
                false
        );

        // Retrieve the username from arguments
        username = HomeFragmentArgs.fromBundle(getArguments()).getUsername();

        return binding.getRoot();
    }

    @Override
    public void onStart() {
        super.onStart();

        // Clear inputs
        binding.siteTextInput.setText(null);
        binding.siteUserTextInput.setText(null);
        binding.sitePasswordTextInput.setText(null);
        binding.sitePasswordTextInput.setInputType(InputType.TYPE_CLASS_TEXT | InputType.TYPE_TEXT_VARIATION_PASSWORD);
        binding.autogenerateCheckbox.setChecked(false);
        binding.showPasswordButton.setImageResource(R.drawable.ic_outline_remove_red_eye_24);

        // Update the site text field
        TextWatcher siteTextWatcher = new TextWatcher() {

            @Override
            public void beforeTextChanged(CharSequence charSequence, int i, int i1, int i2) {

            }

            @Override
            public void onTextChanged(CharSequence charSequence, int i, int i1, int i2) {
                siteName = charSequence.toString();
            }

            @Override
            public void afterTextChanged(Editable editable) {

            }
        };
        binding.siteTextInput.addTextChangedListener(siteTextWatcher);

        // Update the site username text field
        TextWatcher siteUserTextWatcher = new TextWatcher() {

            @Override
            public void beforeTextChanged(CharSequence charSequence, int i, int i1, int i2) {

            }

            @Override
            public void onTextChanged(CharSequence charSequence, int i, int i1, int i2) {
                siteUsername = charSequence.toString();
            }

            @Override
            public void afterTextChanged(Editable editable) {

            }
        };
        binding.siteUserTextInput.addTextChangedListener(siteUserTextWatcher);

        // Update the site username text field
        TextWatcher passwordTextWatcher = new TextWatcher() {

            @Override
            public void beforeTextChanged(CharSequence charSequence, int i, int i1, int i2) {

            }

            @Override
            public void onTextChanged(CharSequence charSequence, int i, int i1, int i2) {
                password = charSequence.toString();
            }

            @Override
            public void afterTextChanged(Editable editable) {

            }
        };
        binding.sitePasswordTextInput.addTextChangedListener(passwordTextWatcher);

        // Autogenerated password
        CheckBox autogenerateCheckbox = binding.autogenerateCheckbox;
        autogenerateCheckbox.setOnCheckedChangeListener(new CompoundButton.OnCheckedChangeListener() {
            @Override
            public void onCheckedChanged(CompoundButton buttonView, boolean isChecked) {
                if (buttonView.isChecked()) {
                    binding.sitePasswordTextInput.setText(null);
                    binding.sitePasswordTextInput.setText(generatePassword());
                    autogenerated = true;
                }
                else
                {
                    binding.sitePasswordTextInput.setText(null);
                    autogenerated = false;
                }
            }
        });

        // See password button
        AtomicBoolean buttonClicked = new AtomicBoolean(false);
        ImageButton passwordButton = binding.showPasswordButton;
        passwordButton.setOnClickListener(view -> {
            if(!buttonClicked.get()) {
                buttonClicked.set(true);
                passwordButton.setImageResource(R.drawable.ic_baseline_remove_red_eye_24);
                binding.sitePasswordTextInput.setInputType(InputType.TYPE_CLASS_TEXT);
            } else {
                buttonClicked.set(false);
                passwordButton.setImageResource(R.drawable.ic_outline_remove_red_eye_24);
                binding.sitePasswordTextInput.setInputType(InputType.TYPE_CLASS_TEXT | InputType.TYPE_TEXT_VARIATION_PASSWORD);
            }
        });

        // Handle add site button
        binding.addSiteButton.setOnClickListener(view -> {
            // Add new site
            List<Site> userSites = passwordManagerDAO.getUserSites(username);
            boolean repeatedSite = false;

            // Check the site is not repeated
            if(!userSites.isEmpty()) {
                for(Site s : userSites) {
                    if(siteName.equals(s.getName())) {
                        repeatedSite = true;
                        break;
                    }
                }
            }

            if (repeatedSite) {
                Snackbar.make(view, R.string.repeated_site_error_message, Snackbar.LENGTH_LONG).show();
            } else {
                // Get user
                User user = passwordManagerDAO.getUser(username);
                // Encrypt password with SHA-256
                String encryptedPassword = null;
                try {
                    encryptedPassword = encryptPassword(password);
                } catch (NoSuchAlgorithmException e) {
                    e.printStackTrace();
                }
                Site site = new Site(siteName, siteUsername, encryptedPassword, user, autogenerated);
                passwordManagerDAO.addSite(site);

                // Success message
                Snackbar.make(view, R.string.site_added_successfully_message, Snackbar.LENGTH_LONG).show();

                // Go back to home
                Navigation.findNavController(view)
                        .navigate(NewSiteFragmentDirections
                                .actionNewSiteFragmentToHomeFragment(username));
            }
        });

        // Bottom navigation
        ImageButton homeButton = binding.homeButton;
        ImageButton newSiteButton = binding.newSiteButton;
        ImageButton settingsButton = binding.settingsButton;

        // New site button filled
        newSiteButton.setImageResource(R.drawable.ic_twotone_add_circle_24);
        newSiteButton.setBackgroundColor(App.getContext().getResources().getColor(R.color.fill_green));

        homeButton.setOnClickListener(view -> {
            Navigation.findNavController(view)
                    .navigate(NewSiteFragmentDirections
                            .actionNewSiteFragmentToHomeFragment(username));
        });

        newSiteButton.setOnClickListener(view -> {
            Navigation.findNavController(view)
                    .navigate(NewSiteFragmentDirections
                            .actionNewSiteFragmentSelf(username));
        });

        settingsButton.setOnClickListener(view -> {
            Navigation.findNavController(view)
                    .navigate(NewSiteFragmentDirections
                            .actionNewSiteFragmentToSettingsFragment(username));
        });
    }

    public String generatePassword() {

        String alphabet = "abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789-_$";
        int size = 20;
        StringBuilder sb = new StringBuilder(size);
        int i = 0;

        for(i=0; i < size; i++) {
            int index = (int)(alphabet.length() * Math.random());
            sb.append(alphabet.charAt(index));
        }

        return sb.toString();
    }

    String encryptPassword(String planePassword) throws NoSuchAlgorithmException {
        MessageDigest digest = MessageDigest.getInstance("SHA-256");
        byte[] hash = digest.digest(planePassword.getBytes());

        StringBuilder hexString = new StringBuilder();
        for(byte b : hash) {
            String hex = Integer.toHexString(0xff & b);
            if(hex.length() == 1) {
                hexString.append('0');
            }
            hexString.append(hex);
        }

        return hexString.toString();
    }
}
